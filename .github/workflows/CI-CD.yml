#name: build_upload_notify
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  build_upload_notify:
#    name: Build, Upload, and Notify
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: '12.x'
#
#      - name: Set up Flutter
#        uses: subosito/flutter-action@v1
#        with:
#          channel: 'stable'
#
#      - name: Get Branch Name
#        id: branch
#        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT
#
#      - name: Get Today's Date
#        id: date
#        run: echo "date=$(date +'%d%m%y')" >> $GITHUB_OUTPUT
#
#      - name: Read Current Version
#        id: read_version
#        run: echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
#
#      - name: Increment Version
#        id: increment_version
#        run: |
#          current_version="${{ steps.read_version.outputs.version }}"
#          IFS='.' read -r -a version_parts <<< "$current_version"
#          major=${version_parts[0]}
#          minor=${version_parts[1]}
#
#          if [ $minor -eq 9 ]; then
#            major=$((major + 1))
#            minor=0
#          else
#            minor=$((minor + 1))
#          fi
#
#          new_version="$major.$minor"
#          echo "new_version=$new_version" >> $GITHUB_OUTPUT
#          echo $new_version > version.txt
#
#      - name: Install Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#
#      - name: Install Google API Client
#        run: pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib
#
#      - name: Install Flutter Dependencies
#        run: flutter pub get
#
#      - name: Build APK
#        run: flutter build apk --release
#
#      - name: Rename APK File
#        run: |
#          mv build/app/outputs/apk/release/app-release.apk build/app/outputs/apk/release/Remote_Master-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}.apk
#
#
#      - name: Archive Files
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y zip
#          zip -r archive.zip build/app/outputs/apk/release/Remote_Master-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}.apk
#
#
#      - name: Configure Git
#        run: |
#          git config --global user.email "actions@github.com"
#          git config --global user.name "GitHub Actions"
#
#      - name: Commit Updated Version
#        run: |
#          git add version.txt
#          git commit -m "Increment version to ${{ steps.increment_version.outputs.new_version }}"
#          git push origin HEAD:${{ github.ref }}
#
#
#      - name: Push to Releases
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "build/app/outputs/apk/release/Remote_Master-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}.apk,build/ios/iphoneos/app.ipa"
#          tag: v${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}
#          token: ${{ secrets.GH_PAT }}
#
#
##      - name: Upload APK to Google Play Console
##        uses: r0adkll/upload-google-play@v1
##        with:
##          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_JSON }}
##          packageName: "com.tamimibnhossain.financemasterpro"
##          releaseFile: "build/app/outputs/apk/release/Remote_Master-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}.apk"
##          track: "internal"
##          releaseName: "Finance Master Pro-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}"
##          whatsNew: "New Version of Finance Master Pro is available.
##          releaseNotesFile: "build/app/outputs/apk/release/Remote_Master-${{ steps.increment_version.outputs.new_version }}.${{ steps.date.outputs.date }}.apk"
##          userFraction: "0.1"
##          releaseStatus: "draft"
##          consoleTimeout: 600000
##


## Github Actions CI workflow to deploy to Internal testing in the Play Store
name: CI_STORE_DEPLOY_ANDROID

on:
  # Run this workflow when any new code is pushed into the main branch
  push:
    branches: [main]

jobs:
  store_deploy_android:
    # Only run this job if the branch name starts with 'release/'
    if:  startsWith(github.head_ref, 'release/')
    name: android store release
    runs-on: ubuntu-latest
    env:
      # Setup env variables that will be used throughout the workflow
      JAVA_VERSION: 12.0
      FLUTTER_VERSION: 3.13.1
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
      KEYSTORE_PATH: android/upload-keystore.jks
      KEY_PROPS_PATH: android/key.properties
      SERVICE_ACCOUNT_PATH: store_credentials.json
    steps:
      # Checkout repository codebase
      - name: Checkout the code
        uses: actions/checkout@v3

      # Setup Java in the VM
      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # Setup Flutter in the VM
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # Decode Android env variables
      - name: Decode Android keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

      - name: Decode Android key properties
        run: echo "${{ secrets.ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}

      # Decode Android release Service Account
      - name: Decode Android Service Account
        run: echo "${{ secrets.PRODUCTION_CREDENTIAL_FILE }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      # Run flutter commands
      - name: Run flutter pub get
        run: flutter pub get

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🕵️ Analyze to check for bad Dart/Flutter practices
        run: flutter analyze

      - name: 📉 Run all app tests
        run: flutter test

      # Build Android Bundle release file
      - name: Build aab
        run: |
          flutter build appbundle 
          --release

      # Upload generated aab to project artifacts
      - name: Upload generated aab to the artifacts
        uses: actions/upload-artifact@master
        with:
          name: aab-stores
          path: {{ env.AAB_PATH }}

      # Deploy bundle to Google Play internal testing
      - name: Deploy to Play Store (Internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: {{ env.SERVICE_ACCOUNT_PATH }}
          packageName: com.yourapp.package
          releaseFiles: {{ env.AAB_PATH }}
          track: internal